            # Mark if this is a shortened line - does not contain 30 and 50 kts
            # wind radius - set those to -1 to mark them as missing
            if len(data) < 8:
                self.max_wind_radius[i] = -1
            else:
                data[7] = int(data[7]) - int(int(data[7])/10000)*10000
                data[9] = int(data[9]) - int(int(data[9])/10000)*10000
                #data[8] = (data[7] + int(data[8]))/2
                #data[10] = (data[9] + int(data[10]))/2
                self.radius_30kts[i] = units.convert(float(data[9]), 'nmi', 'km')
                self.radius_50kts[i] = units.convert(float(data[7]), 'nmi', 'km')
                self.max_wind_radius[i] = calculate_radius_max_wind(rho_air,
                                        self.eye_location[i, 1], self.max_wind_speed[i],
                                        self.central_pressure[i], ambient_pressure,
                                        self.radius_30kts[i], self.radius_50kts[i])
                self.max_wind_radius[i] = units.convert(self.max_wind_radius[i],
                                                        'km', 'm')
            # Warning for formats that have yet to have a default way to determine crticial
            # storm radius from the input data
            missing_data_warning_str = """*** Cannot yet automatically determine the storm radius.
                Will write out GeoClaw formats but note that these will
                not work when running GeoClaw currently."""
            warnings.warn(missing_data_warning_str)
            
            # Current storm radius is not given
            self.storm_radius[i] = 0
